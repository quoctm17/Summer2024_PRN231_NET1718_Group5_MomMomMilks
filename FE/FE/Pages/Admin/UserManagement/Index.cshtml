@page
@model FE.Pages.Admin.UserManagement.IndexModel
@{
    ViewData["Title"] = "User Management";
}

<div class="card mb-4">
    <div class="card-header">
        <i class="fas fa-table me-1"></i>
        Quản lý người dùng
    </div>
    <div class="p-4">
        <button class="btn btn-success" id="btnCreateUser">
            Tạo mới người dùng
        </button>
    </div>
    <div class="card-body">
        <table class="table" id="userTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Tên</th>
                    <th>Điện thoại</th>
                    <th>Email</th>
                    <th>Vai trò</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody id="userList" class="font-weight-light">
            </tbody>
        </table>
    </div>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Tạo người dùng</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="createForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="createName" class="form-label">Tên: </label>
                        <input type="text" class="form-control" required id="createName">
                    </div>
                    <div class="mb-3">
                        <label for="createPhoneNumber" class="form-label">Số điện thoại: </label>
                        <input type="text" class="form-control" required id="createPhoneNumber">
                    </div>
                    <div class="mb-3">
                        <label for="createEmail" class="form-label">Email: </label>
                        <input type="email" class="form-control" required id="createEmail">
                    </div>
                    <div class="mb-3">
                        <label for="createRole" class="form-label">Vai trò: </label>
                        <select class="form-select" required id="createRole">
                            <option value="4">Admin</option>
                            <option value="3">Manager</option>
                            <option value="2">Shipper</option>
                            <option value="1">Customer</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Thoát</button>
                        <button type="button" class="btn btn-primary" id="createUser">Tạo</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Sửa thông tin</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="updateForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="updateId" class="form-label">Id: </label>
                        <input type="text" class="form-control" disabled id="updateId">
                    </div>
                    <div class="mb-3">
                        <label for="updateName" class="form-label">Tên: </label>
                        <input type="text" class="form-control" required id="updateName">
                    </div>
                    <div class="mb-3">
                        <label for="updatePhoneNumber" class="form-label">Số điện thoại: </label>
                        <input type="text" class="form-control" required id="updatePhoneNumber">
                    </div>
                    <div class="mb-3">
                        <label for="updateEmail" class="form-label">Email: </label>
                        <input type="email" class="form-control" required id="updateEmail">
                    </div>
                    <div class="mb-3">
                        <label for="updateRole" class="form-label">Vai trò: </label>
                        <select class="form-select" required id="updateRole">
                            <option value="2">Admin</option>
                            <option value="3">Manager</option>
                            <option value="4">Shipper</option>
                            <option value="1">Customer</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="updateStatus" class="form-label">Trạng thái: </label>
                        <select class="form-select" required id="updateStatus">
                            <option value="1">Hoạt động</option>
                            <option value="0">Không hoạt động</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Thoát</button>
                        <button type="button" class="btn btn-primary" id="btnUpdateUser">Sửa</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Xác nhận</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn tiếp tục?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="confirmButton">Đồng ý</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Thông báo</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="notificationMessage">
                <!-- Message will be inserted dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
    @using Helpers;
    @using Models;

        var user = SessionHelper.GetObjectFromJson<User>(HttpContext.Session, "user");
        string token = null;
        if (user != null)
        {
            token = user.Token;
        }
    }

<script>
    document.addEventListener('DOMContentLoaded', function () {
        getUser();
        document.getElementById('btnCreateUser').addEventListener('click', showCreate);
        document.getElementById('createUser').addEventListener('click', createUser);
    });

    async function getUser() {
        try {
            const response = await fetch(`http://localhost:5215/odata/User/userAdmin`, {
                headers: {
                    'Authorization': 'Bearer @token'
                }
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            console.log('API response:', data);

            const users = data.value || data.$values;
            const userList = document.getElementById('userList');

            for (const user of users) {
                const tr = document.createElement('tr');
                const phone = user.phoneNumber || "Không có";
                const status = user.status === 1 ? "Hoạt động" : "Không hoạt động";
                tr.innerHTML = `<td>${user.id}</td>
                                <td>${user.userName}</td>
                                <td>${phone}</td>
                                <td>${user.email}</td>
                                <td>${user.role}</td>
                                <td>${status}</td>
                                <td>
                                    <a href="#" class="updateUser" data-id="${user.id}">Sửa</a> |
                                    <a href="#" class="deleteUser" data-id="${user.id}">Xóa</a>
                                </td>`;
                userList.appendChild(tr);
            }

            // Initialize DataTable after populating the table
            $(document).ready(function () {
                $('#userTable').DataTable();
            });
        } catch (error) {
            console.error('Error fetching user data:', error);
        }
    }

    async function createUser() {
        // Get form values
        const userName = document.getElementById('createName').value;
        const phoneNumber = document.getElementById('createPhoneNumber').value;
        const email = document.getElementById('createEmail').value;
        const role = document.getElementById('createRole');

        // Validation
        const usernameRegex = /^[A-Za-zÀ-Ỹà-ỹ\s]+$/;
        if (!usernameRegex.test(userName)) {
            showNotification('Tên người dùng chỉ có thể chứa chữ cái, dấu cách và ký tự tiếng Việt.');
            return;
        }

        const phoneNumberRegex = /^\d{10}$/;
        if (!phoneNumberRegex.test(phoneNumber)) {
            showNotification('Số điện thoại phải có chính xác 10 chữ số.');
            return;
        }

        const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
        if (!emailRegex.test(email)) {
            showNotification('Vui lòng nhập địa chỉ email hợp lệ.');
            return;
        }

        const user = {
            userName: userName,
            phoneNumber: phoneNumber,
            email: email,
            role: parseInt(role.value),
        }

        try {
            let response = await fetch(`http://localhost:5215/odata/User`, {
                method: 'POST',
                headers: {
                    'Authorization': 'Bearer @token',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(user)
            });
            if (response.ok || response.status === 500) {
                showNotification('Tạo mới người dùng thành công');
                window.location.href = './';
            } else {
                showNotification('Lỗi tạo người dùng');
            }
        } catch (error) {
            console.error('Error create user:', error);
            showNotification('Không thể tạo người dùng');
        }
    }

    function showCreate() {
        $('#exampleModal').modal('show');
    }

    function showNotification(message) {
        document.getElementById('notificationMessage').innerText = message;
        $('#notificationModal').modal('show');
    }

    function showConfirmation(message, onConfirm) {
        document.getElementById('confirmationModal').querySelector('.modal-body').innerText = message;
        const confirmButton = document.getElementById('confirmButton');
        
        // Remove existing event listeners
        confirmButton.replaceWith(confirmButton.cloneNode(true));
        document.getElementById('confirmButton').addEventListener('click', onConfirm);
        
        $('#confirmationModal').modal('show');
    }

    $(document).ready(function () {
        $('#userTable').on('click', '.updateUser', function () {
            const userId = $(this).data('id');
            $.ajax({
                url: `http://localhost:5215/odata/User/${userId}`,
                type: 'get',
                contentType: 'application/json',
                headers: {
                    'Authorization': 'Bearer @token'
                },
                success: function (result, status, xhr) {
                    $('#updateId').val(result.id);
                    $('#updateName').val(result.userName);
                    $('#updatePhoneNumber').val(result.phoneNumber);
                    $('#updateEmail').val(result.email);
                    const roleMap = {
                        'Admin': 2,
                        'Manager': 3,
                        'Shipper': 4,
                        'Customer': 1
                    };
                    $('#updateRole').val(roleMap[result.role]);
                    $('#updateStatus').val(result.status);
                    $('#updateModal').modal('show');
                },
                error: function (xhr, status, error) {
                    showNotification('Lỗi tìm nạp chi tiết người dùng');
                }
            });
        });

        var updateUser = {};
        document.getElementById('btnUpdateUser').addEventListener('click', function () {
            updateUser = {
                id: $("#updateId").val(),
                userName: $("#updateName").val(),
                email: $("#updateEmail").val(),
                phoneNumber: $("#updatePhoneNumber").val(),
                status: $("#updateStatus").val(),
                role: $("#updateRole").val()
            };

            const usernameRegex = /^[A-Za-zÀ-Ỹà-ỹ\s]+$/;
            if (!usernameRegex.test(updateUser.userName)) {
                showNotification('Tên người dùng chỉ có thể chứa chữ cái, dấu cách và ký tự tiếng Việt.');
                return;
            }

            const phoneNumberRegex = /^\d{10}$/;
            if (!phoneNumberRegex.test(updateUser.phoneNumber)) {
                showNotification('Số điện thoại phải có chính xác 10 chữ số.');
                return;
            }

            const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (!emailRegex.test(updateUser.email)) {
                showNotification('Vui lòng nhập địa chỉ email hợp lệ.');
                return;
            }

            if (!updateUser.id || !updateUser.userName || !updateUser.email || !updateUser.phoneNumber || !updateUser.status || !updateUser.role) {
                showNotification("Hãy điền đủ thông tin");
            } else {
                $.ajax({
                    url: `http://localhost:5215/odata/User/updateUser/${updateUser.id}`,
                    type: 'put',
                    data: JSON.stringify(updateUser),
                    processData: false,
                    contentType: "application/json",
                    headers: {
                        'Authorization': 'Bearer @token'
                    },
                    success: function (result, status, xhr) {
                        window.location.reload(true);
                        $('#updateModal').modal('hide');
                    },
                    error: function (xhr, status, error) {
                        showNotification("Không thể cập nhật thông tin người dùng");
                    }
                });
            }
        });

        $('#userTable').on('click', '.deleteUser', function () {
            const userId = $(this).data('id');

            // Show confirmation modal
            showConfirmation("Bạn có chắc chắn muốn xóa người dùng này không?", function () {
                $.ajax({
                    url: `http://localhost:5215/odata/User/${userId}`,
                    type: 'DELETE',
                    processData: false,
                    contentType: "application/json",
                    headers: {
                        'Authorization': 'Bearer @token'
                    },
                    success: function (result, status, xhr) {
                        showNotification("Người dùng đã xóa thành công");
                        window.location.reload(true);
                    },
                    error: function (xhr, status, error) {
                        showNotification("Không thể xóa người dùng");
                    }
                });
            });
        });
    });
</script>
}
