@page
@model FE.Pages.Customer.UserAddressEditModel
@{
    ViewData["Title"] = "Update Address";
}

<style>
    .sidebar {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        height: fit-content;
    }

    .main-content {
        padding: 20px;
        height: fit-content;
    }

    .sidebar a {
        text-decoration: none;
        display: block;
        padding: 10px 15px;
        color: #333;
    }

        .sidebar a:hover {
            background-color: #ddd;
        }

    .nice-select .list {
        max-height: 200px;
        overflow-y: auto;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-2 col-md-3 sidebar bg-light pt-4">
            <div class="text-center mb-4">
                @{
                                        @using Helpers
                                        @using Models
                    var account = SessionHelper.GetObjectFromJson<User>(HttpContext.Session, "user");
                }
                @if (account != null)
                {
                    <h5>@account.UserName</h5>
                }
                else
                {
                    <script>
                        window.location.href = '/Login';
                    </script>
                }
            </div>
            <div class="list-group list-group-flush">
                <a asp-page="/Customer/UserInformation" asp-route-userId="@account?.Id" class="list-group-item list-group-item-action rounded">Thông tin của tôi</a>
                <a href="/Customer/OrderHistory?userId=@account?.Id" class="list-group-item list-group-item-action rounded">Đơn hàng</a>
                <a asp-page="/Customer/UserAddress" class="list-group-item list-group-item-action rounded">Địa chỉ</a>
                <a href="#" class="list-group-item list-group-item-action rounded">Coupon</a>
            </div>
        </div>
        <!-- Main Content -->
        <div class="col-lg-10 col-md-9 main-content pt-4">
            <h2 class="mb-4">Địa chỉ của tôi</h2>
            <form method="post" onsubmit="event.preventDefault();">
                <div class="form-group">
                    <label class="control-label">Số Nhà<span> *</span></label>
                    <input id="houseNumber" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="control-label">Tên Đường<span> *</span></label>
                    <input id="street" class="form-control" />
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <p>Quận<span> *</span></p>
                        <select id="districtId" class="form-control" required>
                            <option value="" selected>Select your District</option>
                        </select>
                    </div>
                    <div class="form-group col-md-6">
                        <p>Phường<span> *</span></p>
                        <select id="wardId" class="form-control" required>
                            <option value="" selected>Select your Ward</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <input id="editAddress" type="submit" value="Sửa" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Notification Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Thông báo</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="notificationMessage">
                <!-- Message will be inserted dynamically -->
            </div>
            <div class="modal-footer">
                <button id="closeNotificationModal" type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const addressId = urlParams.get('id');
        getUserAddress(addressId);
        $(document).on('change', '#districtId', function () {
            loadAndBindWards(this.value);
        });
        document.getElementById('editAddress').addEventListener('click', function () {
            editAddress(addressId);
        });
    });

    const token = sessionStorage.getItem('token');

    async function editAddress(addressId) {
        event.preventDefault(); // Prevent default form submission behavior

        const id = addressId;
        const userId = getUserIdFromToken();
        const houseNumber = document.getElementById('houseNumber').value;
        const street = document.getElementById('street').value;
        const districtId = document.getElementById('districtId');
        const wardId = document.getElementById('wardId');

        const selectedWard = document.querySelector('#wardId option:checked');
        const latitude = selectedWard ? selectedWard.getAttribute('data-latitude') : null;
        const longitude = selectedWard ? selectedWard.getAttribute('data-longitude') : null;

        const address = {
            id: id,
            userId: parseInt(userId),
            houseNumber: houseNumber,
            street: street,
            districtId: districtId ? parseInt(districtId.value) : null,
            wardId: wardId ? parseInt(wardId.value) : null,
            latitude: latitude,
            longitude: longitude
        };

        console.log("Address data to be sent:", JSON.stringify(address));

        try {
            let response = await fetch(`http://localhost:5215/odata/Address/${addressId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(address)
            });
            if (response.ok || response.status === 500) {
                console.log(response.statusText);
                showNotification('Địa chỉ được cập nhật thành công'); // Show modal after successful update
            } else {
                console.error('Failed to update address');
                showNotification('Không thể cập nhật địa chỉ');
            }
        } catch (error) {
            console.error('Error updating address:', error);
            showNotification('Không thể cập nhật địa chỉ');
        }
    }

    function showNotification(message) {
        document.getElementById('notificationMessage').innerText = message;
        const notificationModal = new bootstrap.Modal(document.getElementById('notificationModal'));

        const closeButton = document.getElementById('closeNotificationModal');
        closeButton.addEventListener('click', function () {
            window.location.href = './UserAddress';
        });

        notificationModal.show();
    }

    async function getUserAddress(addressId) {
        const userId = getUserIdFromToken();

        try {
            let response = await fetch(`http://localhost:5215/odata/Address?$filter=id eq ${addressId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            let data = await response.json();
            const addresses = data.value || data.$values;
            if (addresses.length > 0) {
                const address = addresses[0];
                const district = await loadDistrict();
                const districtSelect = document.getElementById('districtId');
                document.getElementById('houseNumber').value = address.houseNumber || '';
                document.getElementById('street').value = address.street || '';
                for (let i = 0; i < district.$values.length; i++) {
                    let districts = district.$values[i];
                    let option = document.createElement('option');
                    option.value = districts.id;
                    option.text = `${districts.name}`;
                    if (districts.id === address.districtId) {
                        option.selected = true;
                    }
                    districtSelect.appendChild(option);
                }
                $('#districtId').niceSelect('update');

                await loadAndBindWards(address.districtId, address.wardId);
            } else {
                console.log('No addresses found for user:', userId);
            }
        } catch (error) {
            console.error('Error fetching user address:', error);
        }
    }

    async function loadDistrict() {
        try {
            const response = await fetch('http://localhost:5215/odata/Districts', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error loading districts:', error);
        }
    }

    async function loadWards(districtId) {
        try {
            const response = await fetch(`http://localhost:5215/odata/Wards?$filter=districtId eq ${districtId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error loading wards:', error);
        }
    }

    async function loadAndBindWards(districtId, selectedWardId = null) {
        const wardSelect = document.getElementById('wardId');
        wardSelect.innerHTML = ''; // Clear existing wards
        const wards = await loadWards(districtId);
        if (wards && wards.$values) {
            for (let i = 0; i < wards.$values.length; i++) {
                let ward = wards.$values[i];
                let option = document.createElement('option');
                option.value = ward.id;
                option.text = ward.name;
                option.setAttribute('data-latitude', ward.latitude);
                option.setAttribute('data-longitude', ward.longitude);
                if (ward.id === selectedWardId) {
                    option.selected = true;
                }
                wardSelect.appendChild(option);
            }
            $('#wardId').niceSelect('update');
        }
    }

    function getUserIdFromToken() {
        const token = sessionStorage.getItem('token');
        if (token) {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.nameid;
        }
        return null;
    }
</script>

