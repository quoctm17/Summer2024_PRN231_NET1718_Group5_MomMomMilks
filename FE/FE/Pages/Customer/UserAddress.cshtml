@page
@model FE.Pages.Customer.UserAddressModel
@{
    ViewData["Title"] = "My Address";
}

<style>
    .sidebar {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        height: fit-content;
    }

    .main-content {
        padding: 20px;
        height: fit-content;
    }

    .sidebar a {
        text-decoration: none;
        display: block;
        padding: 10px 15px;
        color: #333;
    }

        .sidebar a:hover {
            background-color: #ddd;
        }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-2 col-md-3 sidebar bg-light pt-4">
            <div class="text-center mb-4">
                @{
                        @using Helpers
                        @using Models
                    var account = SessionHelper.GetObjectFromJson<User>(HttpContext.Session, "user");
                }
                @if (account != null)
                {
                    <h5>@account.UserName</h5>
                }
                else
                {
                    <script>
                        window.location.href = '/Login';
                    </script>
                }
            </div>
            <div class="list-group list-group-flush">
                <a asp-page="/Customer/UserInformation" asp-route-userId="@account?.Id" class="list-group-item list-group-item-action rounded">Thông tin của tôi</a>
                <a href="/Customer/OrderHistory?userId=@account?.Id" class="list-group-item list-group-item-action rounded">Đơn hàng</a>
                <a asp-page="/Customer/UserAddress" class="list-group-item list-group-item-action rounded">Địa chỉ</a>
                <a href="#" class="list-group-item list-group-item-action rounded">Coupon</a>
            </div>
        </div>
        <!-- Main Content -->
        <div class="col-lg-10 col-md-9 main-content pt-4">
            <h2 class="mb-4">Địa chỉ của tôi</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Địa chỉ</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody id="addressList">
                </tbody>
            </table>
            <a asp-page="/Customer/NewUserAddress" class="site-btn">Thêm mới địa chỉ</a>
        </div>
    </div>
</div>
<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Xác nhận</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Message will be inserted dynamically -->
            </div>
            <div class="modal-footer">
                <button id="confirmButton" type="button" class="btn btn-danger" data-bs-dismiss="modal">Xóa</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Thông báo</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="notificationMessage">
                <!-- Message will be inserted dynamically -->
            </div>
            <div class="modal-footer">
                <button id="closeNotificationModal" type="button" class="btn btn-primary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        getUserAddress();
    });

    const token = sessionStorage.getItem('token');

    async function getUserAddress() {
        const userId = getUserIdFromToken();

        try {
            let response = await fetch(`http://localhost:5215/odata/Address?$filter=userId eq ${userId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            let data = await response.json();
            console.log('API response:', data);
            const addresses = data.value || data.$values;
            const addressList = document.getElementById('addressList');
            let sequenceNumber = 1;
            for (const address of addresses) {
                const districtName = await fetchDistrictName(address.districtId);
                const wardName = await fetchWardName(address.wardId);
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${sequenceNumber}</td>
                                <td>${address.houseNumber} ${address.street}, ${wardName}, ${districtName}</td>
                                <td>
                                    <a href="/Customer/UserAddressEdit?id=${address.id}">Sửa</a> |
                                    <a href="#" onclick="event.preventDefault(); deleteAddress('${address.id}')">Xóa</a>
                                </td>`;
                addressList.appendChild(tr);
                sequenceNumber++;
            }
        } catch (error) {
            console.error('Error fetching user address:', error);
        }
    }

    async function fetchDistrictName(districtId) {
        const apiUrl = `http://localhost:5215/odata/Districts?$filter=id eq ${districtId}`;
        try {
            const response = await fetch(apiUrl, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            const district = data.value ? data.value[0] : data.$values[0];
            return district ? district.name : 'Không tìm thấy';
        } catch (error) {
            console.error('Error fetching district name:', error);
            return 'Không tìm thấy';
        }
    }

    async function fetchWardName(wardId) {
        const apiUrl = `http://localhost:5215/odata/Wards?$filter=id eq ${wardId}`;
        try {
            const response = await fetch(apiUrl, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            const ward = data.value ? data.value[0] : data.$values[0];
            return ward ? ward.name : 'Không tìm thấy';
        } catch (error) {
            console.error('Error fetching ward name:', error);
            return 'Không tìm thấy';
        }
    }

    async function deleteAddress(addressId) {
        showConfirmation("Bạn có chắc chắn muốn xóa địa chỉ này không?", async function () {
            try {
                const response = await fetch(`http://localhost:5215/odata/Address/${addressId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    console.log('Address deleted successfully');
                    showNotification('Địa chỉ đã xóa thành công');
                } else {
                    console.error('Failed to delete address');
                    showNotification('Không xóa được địa chỉ');
                }
            } catch (error) {
                console.error('Error deleting address:', error);
                showNotification('Không xóa được địa chỉ');
            }
        });
    }

    function showNotification(message) {
        document.getElementById('notificationMessage').innerText = message;
        const notificationModal = new bootstrap.Modal(document.getElementById('notificationModal'));
        notificationModal.show();

        document.getElementById('closeNotificationModal').addEventListener('click', function () {
            window.location.href = './UserAddress';
        }, { once: true });
    }

    function showConfirmation(message, onConfirm) {
        document.getElementById('confirmationModal').querySelector('.modal-body').innerText = message;
        const confirmButton = document.getElementById('confirmButton');

        confirmButton.replaceWith(confirmButton.cloneNode(true));
        document.getElementById('confirmButton').addEventListener('click', function () {
            onConfirm();
            $('#confirmationModal').modal('hide');
        }, { once: true });

        const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
        confirmationModal.show();
    }

    function getUserIdFromToken() {
        const token = sessionStorage.getItem('token');
        if (token) {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.nameid;
        }
        return null;
    }
</script>
