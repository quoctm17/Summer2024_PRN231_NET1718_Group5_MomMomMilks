@page "/Customer/OrderHistory"
@model FE.Pages.Customer.IndexModel
@{
    ViewData["Title"] = "Customer Information";
}

<style>
    .sidebar {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        height: fit-content;
    }

    .main-content {
        padding: 20px;
        height: fit-content;
    }

    .sidebar a {
        text-decoration: none;
        display: block;
        padding: 10px 15px;
        color: #333;
    }

        .sidebar a:hover {
            background-color: #ddd;
        }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-2 col-md-3 sidebar bg-light pt-4">
            <div class="text-center mb-4">
                @{
                                                                    @using Helpers
                                                                    @using Models
                    var account = SessionHelper.GetObjectFromJson<User>(HttpContext.Session, "user");
                }
                @if (account != null)
                {
                    <h5>@account.UserName</h5>
                }
                else
                {
                    <script>
                        window.location.href = '/Login';
                    </script>
                }
            </div>
            <div class="list-group list-group-flush">
                <a asp-page="/Customer/UserInformation" asp-route-userId="@account?.Id" class="list-group-item list-group-item-action rounded">Thông tin của tôi</a>
                <a href="/Customer/OrderHistory?userId=@account?.Id" class="list-group-item list-group-item-action rounded">Đơn hàng</a>
                <a asp-page="/Customer/UserAddress" class="list-group-item list-group-item-action rounded">Địa chỉ</a>
                <a asp-page="/Customer/UserCoupon" class="list-group-item list-group-item-action rounded">Coupon</a>
            </div>
        </div>
        <!-- Main Content -->
        <div class="col-lg-10 col-md-9 main-content pt-4">
            <ul class="nav nav-tabs mb-4">
                <li class="nav-item">
                    <a class="nav-link active" href="#">All</a>
                </li>
                @* <li class="nav-item">
                    <a class="nav-link" href="#">Paid</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Waiting For Shipping</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Shipping</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Completed</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Cancelled</a>
                </li> *@
            </ul>
            <div class="text-center mt-4">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Đơn hàng</th>
                                <th>Ngày mua</th>
                                <th>Sửa vào ngày</th>
                                <th>Tổng tiền</th>
                                <th>Phương thức thanh toán</th>
                                <th>Người giao</th>
                                <th>Trạng thái</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="orderTableBody">
                            <!-- Rows will be dynamically added here -->
                        </tbody>
                    </table>
                    @* <p>Place order and enjoy <span class="text-danger">Fast Shipping</span></p>
                    <button class="btn btn-warning">Start buying</button>
                    <button class="btn btn-outline-danger">View Your Cart</button> *@
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="cancelOrderForm">
                    <input type="hidden" id="orderCodeInput">
                    <div class="mb-3">
                        <label for="cancellationReason" class="form-label">Reason for cancellation:</label>
                        <textarea class="form-control" id="cancellationReason" name="cancellationReason" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" onclick="confirmCancelOrder()">Cancel Order</button>
            </div>
        </div>
    </div>
</div>
<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Xác nhận</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmationModalBody">
                <!-- Dynamic content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="confirmationModalConfirmBtn">Đồng ý</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Modal -->
<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Thông báo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="notificationModalBody">
                <!-- Dynamic content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('userId');
        loadOrder(userId);
    });

    const token = sessionStorage.getItem('token');
    const userId = getUserIdFromToken();
    let orderIdForCancellation;

    async function loadOrder(userId) {
        try {
            console.log('Starting to load orders...');
            let response = await fetch(`http://localhost:5215/odata/Order/OrderHistory(${userId})`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Failed to fetch orders');
            }

            let data = await response.json();
            console.log('API response:', data);
            const orders = data.value || data.$values || [];

            if (!Array.isArray(orders)) {
                throw new Error('Orders data is not an array');
            }

            const ordersList = document.getElementById('orderTableBody');
            let sequenceNumber = 1;

            for (const order of orders) {
                const createDate = new Date(order.createAt).toLocaleDateString('en-GB');
                const updateDate = new Date(order.updateAt).toLocaleDateString('en-GB');

                // Get status asynchronously and wait for it to resolve
                const statusNamePromise = getOrderStatus(order.orderStatusId);
                const statusName = await statusNamePromise;
                const shipper = order.shipper || 'Chưa có';

                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${sequenceNumber}</td>
                    <td>${createDate}</td>
                    <td>${updateDate}</td>
                    <td>${order.totalAmount}</td>
                    <td>${order.paymentType}</td>
                    <td>${shipper}</td>
                    <td>${statusName}</td>
                    <td>${getActionButtons(order)}</td>
                `;
                ordersList.appendChild(tr);
                sequenceNumber++;
            }
        } catch (error) {
            console.error('Error fetching orders:', error);
            showNotification('Lỗi tải dữ liệu');
        }
    }

    async function getOrderStatus(orderStatusId) {
        try {
            const response = await fetch(`http://localhost:5215/odata/Order/OrderStatus?$filter=id eq ${orderStatusId}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`Failed to fetch status: ${response.status} - ${response.statusText}`);
            }

            const data = await response.json();
            console.log('API response:', data);

            // Assuming $values is an array of status objects, return the first item
            if (data.$values && data.$values.length > 0) {
                return data.$values[0].name;
            } else {
                throw new Error('Empty response or invalid data format');
            }
        } catch (error) {
            console.error('Error fetching status:', error);
            throw error; // Re-throw the error to be caught by the caller
        }
    }

    function getActionButtons(order) {
        const normalizedPaymentType = order.paymentType;
        const normalizedStatusId = order.orderStatusId;
        console.log(`Order ID: ${order.id}, Payment Type ID: ${normalizedPaymentType}, Order Status ID: ${normalizedStatusId}`);

        switch (normalizedPaymentType) {
            case "OnlinePayment": // Online Payment
                console.log(`Order ID: ${order.id} - Adding buttons for online payment`);
                if (normalizedStatusId === 1) { // Paying
                    return `
                        <a href="/Customer/OrderDetail?id=${order.id}" class="btn btn-primary">Xem</a>
                        <a href="#" onclick="prepareCancelOrderOnline(${order.paymentOrderCode})" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#cancelOrderModal">Hủy</a>
                        <a href="#" onclick="payOrder(event, ${order.paymentOrderCode})" class="btn btn-success mt-2">Thanh toán</a>
                    `;
                } else if (normalizedStatusId === 2) {
                    return `
                        <a href="/Customer/OrderDetail?id=${order.id}" class="btn btn-primary">Xem</a>
                        <a href="#" onclick="prepareCancelOrderOnline(${order.paymentOrderCode})" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#cancelOrderModal">Hủy</a>
                    `;
                } else {
                    return `<a href="/Customer/OrderDetail?id=${order.id}" class="btn btn-primary">Xem</a>`;
                }
            case "In cash": // Cash Payment
                console.log(`Order ID: ${order.id} - Adding buttons for cash payment`);
                if (normalizedStatusId === 2) { // Assigning
                    return `
                        <a href="/Customer/OrderDetail?id=${order.id}" class="btn btn-primary">Xem</a>
                        <a href="#" onclick="cancelOrderInCash(${order.id})" class="btn btn-danger">Hủy</a>
                    `;
                } else {
                    return `<a href="/Customer/OrderDetail?id=${order.id}" class="btn btn-primary">Xem</a>`;
                }
            default:
                console.log(`Order ID: ${order.id} - View only`);
                return `<a href="/Customer/OrderDetail?id=${order.id}" class="btn btn-primary">Xem</a>`;
        }
    }

    async function payOrder(event, paymentOrderCode) {
        event.preventDefault();

        // Open a blank window immediately to retain the user interaction context
        const newWindow = window.open('', '_blank');

        try {
            let response = await fetch(`http://localhost:5215/api/Payment/${paymentOrderCode}`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Failed to fetch orders');
            }

            let data = await response.json();
            console.log('API response:', data);

            if (data.error !== 0 || !data.data || !data.data.id) {
                throw new Error('Invalid API response format');
            }

            const orderId = data.data.id;
            const paymentUrl = `https://pay.payos.vn/web/${orderId}`;

            // Update the URL of the previously opened window
            newWindow.location.href = paymentUrl;

        } catch (error) {
            console.error('Error fetching orders:', error);
            // If there was an error, close the opened window
            newWindow.close();
            showNotification('Lỗi tải dữ liệu thanh toán');
        }
    }

    function prepareCancelOrderOnline(paymentOrderCode) {
        orderIdForCancellation = paymentOrderCode;
        document.getElementById('orderCodeInput').value = paymentOrderCode;
    }

    async function confirmCancelOrder() {
        const cancellationReason = document.getElementById('cancellationReason').value.trim();
        console.log(orderIdForCancellation);
        if (!cancellationReason) {
            showNotification('Hãy đưa ra lý do hủy đơn hàng!');
            return;
        }

        showConfirmation('Bạn có chắc chắn hủy đơn hàng này?', async function () {
            try {
                const response = await fetch('http://localhost:5215/api/Payment/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        orderCode: orderIdForCancellation,
                        cancellationReason: cancellationReason
                    })
                });

                if (response.ok) {
                    $('#cancelOrderModal').modal('hide');
                    window.location.href = `/Customer/OrderHistory?userId=${userId}`;
                    console.log('Order canceled successfully');
                    showNotification('Hủy đơn hàng thành công');
                } else {
                    console.error('Failed to cancel order');
                    showNotification('Không thể hủy đơn hàng');
                }
            } catch (error) {
                console.error('Error canceling order:', error);
                showNotification('Lỗi hủy đơn hàng');
            }
        });
    }

    async function cancelOrderInCash(orderId) {
        showConfirmation('Bạn có chắc chắn hủy đơn hàng này', async function () {
            try {
                const response = await fetch(`http://localhost:5215/odata/Order/cancel-order?orderId=${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    window.location.href = `/Customer/OrderHistory?userId=${userId}`;
                    console.log('Order canceled successfully');
                    showNotification('Hủy đơn hàng thành công');
                } else {
                    console.error('Failed to cancel order');
                    showNotification('Không thể hủy đơn hàng');
                }
            } catch (error) {
                console.error('Error canceling order:', error);
                showNotification('Lỗi hủy đơn hàng');
            }
        });
    }


    function getUserIdFromToken() {
        const token = sessionStorage.getItem('token');
        if (token) {
            const payload = JSON.parse(atob(token.split('.')[1]));
            return payload.nameid;
        }
        return null;
    }
    function showNotification(message) {
        document.getElementById('notificationModalBody').innerText = message;
        const notificationModal = new bootstrap.Modal(document.getElementById('notificationModal'));
        notificationModal.show();
    }

    function showConfirmation(message, confirmCallback) {
        document.getElementById('confirmationModalBody').innerText = message;
        const confirmationModal = new bootstrap.Modal(document.getElementById('confirmationModal'));
        document.getElementById('confirmationModalConfirmBtn').onclick = function () {
            confirmCallback();
            confirmationModal.hide();
        };
        confirmationModal.show();
    }
</script>