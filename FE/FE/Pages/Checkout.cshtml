@page
@model FE.Pages.CheckoutModel
@{
}

<body>
    <!-- Page Preloder -->
    <div id="preloder">
        <div class="loader"></div>
    </div>
    <!-- Hero Section Begin -->
    <section class="hero hero-normal">
        <div class="container">
            <div class="row">
                <div class="col-lg-3">
                    <div class="hero__categories">
                        <div class="hero__categories__all">
                            <i class="fa fa-bars"></i>
                            <span>Tất cả loại sữa</span>
                        </div>
                        <ul>
                            @foreach (var category in Model.Categories)
                            {
                                <li><a href="#">@category.Name</a></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="col-lg-9">
                    <div class="hero__search">
                        <div class="hero__search__form">
                            <form action="#">
                                <div class="hero__search__categories">
                                    Tất cả loại sữa
                                    <span class="arrow_carrot-down"></span>
                                </div>
                                <input type="text" placeholder="Bạn cần tìm gì?">
                                <button type="submit" class="site-btn">Tìm kiếm</button>
                            </form>
                        </div>
                        <div class="hero__search__phone">
                            <div class="hero__search__phone__icon">
                                <i class="fa fa-phone"></i>
                            </div>
                            <div class="hero__search__phone__text">
                                <h5>+65 11.188.888</h5>
                                <span>hỗ trợ 24/7</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Hero Section End -->
    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-section set-bg" data-setbg="img/breadcrumb.jpg">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <div class="breadcrumb__text">
                        <h2>Thanh Toán</h2>
                        <div class="breadcrumb__option">
                            <a href="./index.html">Trang chủ</a>
                            <span>Thanh toán</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->
    <!-- Checkout Section Begin -->
    <section class="checkout spad">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <h6>
                        <span class="icon_tag_alt"></span> Bạn có mã giảm giá? <a href="#">Ấn vào đây</a> để nhập mã.
                    </h6>
                </div>
            </div>
            <div class="checkout__form">
                <h4>Chi tiết thanh toán</h4>
                <form id="checkoutForm" method="post">
                    <div class="row">
                        <div class="col-lg-8 col-md-6">
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="checkout__input">
                                        <p>Chọn ngày<span>*</span></p>
                                        <input type="date" id="orderDate" name="orderDate" required>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="checkout__input">
                                        <p>Chọn khung giờ<span>*</span></p>
                                        <select id="timeSlot" name="timeSlot" required>
                                            <option value="" disabled selected>Chọn khung giờ</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="margin-bottom: 20px;">
                                <div class="col-lg-8">
                                    <div class="checkout__input">
                                        <p>Chọn địa chỉ<span>*</span></p>
                                        <select id="addressSelect" name="addressSelect" required>
                                            <option value="" disabled selected>Chọn địa chỉ</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            @* <div class="checkout__input">
                                <p>Chọn mã giảm giá</p>
                                <select id="couponSelect" name="couponSelect">
                                    <option value="" disabled selected>Chọn mã giảm giá</option>
                                </select>
                            </div> *@
                            <!-- Hidden fields for UserName, Phone, and Email -->
                            <input type="hidden" id="firstName" name="firstName" required>
                            <input type="hidden" id="phone" name="phone" required>
                            <input type="hidden" id="email" name="email" required>

                            @*<div class="checkout__input">
                                <p>Order notes</p>
                                <input type="text" placeholder="Notes about your order, e.g. special notes for delivery." name="orderNotes">
                            </div>*@
                        </div>
                        <div class="col-lg-4 col-md-6">
                            <div class="checkout__order">
                                <h4>Đơn hàng của bạn</h4>
                                <div class="checkout__order__products">
                                    <div class="row">
                                        <div class="col-lg-5">Sản phẩm</div>
                                        <div class="col-lg-2">Qty</div>
                                        <div class="col-lg-5">Tổng tiền</div>
                                    </div>
                                </div>
                                <ul id="order-items" class="checkout__order__items">
                                    <!-- Example order item, dynamically generated -->
                                    <li class="checkout__order__item row" data-milk-id="1" data-quantity="2" data-price="100" data-total="200">
                                        <div class="col-lg-6 text-truncate" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Milk Name</div>
                                        <div class="col-lg-2 quantity">2</div>
                                        <div class="col-lg-4 text-right item-price">100 đ</div>
                                    </li>
                                </ul>
                                <div class="checkout__order__subtotal">Tổng phụ <span id="order-subtotal">0 đ</span></div>
                                <div class="checkout__order__discount">Giảm giá <span id="order-discount">0 đ</span></div>
                                <div class="checkout__order__total">Tổng tiền <span id="order-total">0 đ</span></div>
                                <div class="checkout__input__checkbox">
                                    <select id="paymentType" name="paymentType" required>
                                        <option value="" disabled selected>Chọn phương thức thanh toán</option>
                                    </select>
                                </div>

                                <button type="button" id="placeOrderButton" class="site-btn">Đặt đơn</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </section>
    <!-- Checkout Section End -->

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            loadOrderSummary();
            loadUserDetails();
            loadTimeSlots();
            loadPaymentTypes();
            loadCoupons();

            document.getElementById('placeOrderButton').addEventListener('click', validateOrderAmount);
            const couponSelect = document.getElementById('couponSelect');
            couponSelect.addEventListener('change', function () {
                console.log('Coupon selected'); // Debug log to check event listener
                applyCouponDiscount();
            });
            //document.querySelector('.shoping__discount form').addEventListener('click', applyCoupon);

            // Check if orderCode is present in URL and call confirmPayment
            const urlParams = new URLSearchParams(window.location.search);
            const orderCode = urlParams.get('orderCode');
            if (orderCode) {
                confirmPayment(orderCode);
            }
        });

        async function validateOrderAmount() {
            const totalAmount = parseFloat(document.getElementById('order-total').innerText.replace(' đ', '').replace('.', '')) * 1000;
            if (totalAmount > 5000000) {
                alert('Tổng tiền không được vượt quá 5 triệu đồng.');
            } else {
                placeOrder();
            }
        }

        async function loadOrderSummary() {
            const cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            if (cart.length === 0) {
                alert('Your cart is empty.');
                return;
            }

            let orderItemsHtml = cart.map(item => `
        <li class="checkout__order__item row" data-milk-id="${item.id}" data-quantity="${item.quantity}" data-price="${item.price}" data-total="${item.price * item.quantity}">
            <div class="col-lg-6 text-truncate" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${item.name}</div>
            <div class="col-lg-2 quantity">${item.quantity}</div>
            <div class="col-lg-4 text-right item-price">${formatCurrency(item.price)} đ</div>
        </li>
    `).join('');
            document.getElementById('order-items').innerHTML = orderItemsHtml;
            updateOrderTotal(cart);
        }

        async function loadTimeSlots() {
            const token = sessionStorage.getItem('token');
            try {
                let response = await fetch('http://localhost:5215/odata/TimeSlot', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    let timeSlots = await response.json();
                    console.log('TimeSlots:', timeSlots);

                    let timeSlotDropdown = document.getElementById('timeSlot');
                    timeSlotDropdown.innerHTML = '<option value="" disabled selected>Chọn khung giờ</option>';

                    // Date validation logic
                    const orderDateInput = document.getElementById('orderDate');
                    const currentDate = new Date();
                    const maxDate = new Date();
                    maxDate.setDate(currentDate.getDate() + 7);

                    // Set min and max attributes for date input
                    orderDateInput.setAttribute('min', currentDate.toISOString().split('T')[0]);
                    orderDateInput.setAttribute('max', maxDate.toISOString().split('T')[0]);

                    orderDateInput.addEventListener('change', function () {
                        const selectedDate = new Date(orderDateInput.value);
                        const currentTime = new Date();

                        timeSlotDropdown.innerHTML = '<option value="" disabled selected>Chọn khung giờ</option>';

                        for (let i = 0; i < timeSlots.$values.length; i++) {
                            let timeSlot = timeSlots.$values[i];
                            let startTime = new Date(selectedDate);
                            let [hours, minutes, seconds] = timeSlot.startTime.split(':').map(Number);
                            startTime.setHours(hours, minutes, seconds, 0);

                            // Decrease 1 hour
                            startTime.setHours(startTime.getHours() - 1);
                            console.log(`Start Time for ${timeSlot.name}:`, startTime);

                            let option = document.createElement('option');
                            option.value = timeSlot.id;
                            option.text = `${timeSlot.name} (${timeSlot.startTime} - ${timeSlot.endTime})`;

                            // Disable the option if the current time is greater than or equal to the start time
                            if (selectedDate.toDateString() === currentTime.toDateString() && currentTime >= startTime) {
                                option.disabled = true;
                            }

                            timeSlotDropdown.appendChild(option);
                        }

                        $('#timeSlot').niceSelect('update');
                    });
                } else {
                    console.error('Failed to fetch time slots.');
                }
            } catch (error) {
                console.error('Error fetching time slots:', error);
            }
        }


        async function loadUserDetails() {
            const token = sessionStorage.getItem('token');
            const userId = getUserIdFromToken();
            if (!userId) {
                return;
            }

            try {
                let response = await fetch(`http://localhost:5215/odata/User/me`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    let user = await response.json();
                    console.log('User with Addresses:', user);

                    document.getElementById('firstName').value = user.userName || '';
                    document.getElementById('phone').value = user.phoneNumber || '';
                    document.getElementById('email').value = user.email || '';

                    if (user.addresses && user.addresses.$values.length > 0) {
                        let addressDropdown = document.getElementById('addressSelect');
                        addressDropdown.innerHTML = '<option value="" disabled selected>Chọn địa chỉ</option>'; // Clear previous options
                        for (let i = 0; i < user.addresses.$values.length; i++) {
                            let address = user.addresses.$values[i];
                            let option = document.createElement('option');
                            option.value = address.id;
                            option.text = `${address.houseNumber} ${address.street}, ${address.ward.name}, ${address.ward.district.name}`;
                            addressDropdown.appendChild(option);
                        }

                        // Update nice-select UI
                        $('#addressSelect').niceSelect('update');
                    }
                } else {
                    console.error('Failed to fetch user data.');
                }
            } catch (error) {
                console.error('Error fetching user data:', error);
            }
        }

        async function loadPaymentTypes() {
            const token = sessionStorage.getItem('token');
            try {
                let response = await fetch('http://localhost:5215/odata/PaymentType', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    let paymentTypes = await response.json();
                    console.log('PaymentTypes:', paymentTypes);

                    let paymentTypeDropdown = document.getElementById('paymentType');
                    paymentTypeDropdown.innerHTML = '<option value="" disabled selected>Chọn thương thức</option>'; // Clear previous options
                    for (let i = 0; i < paymentTypes.$values.length; i++) {
                        let option = document.createElement('option');
                        option.value = paymentTypes.$values[i].id;
                        option.text = paymentTypes.$values[i].name;
                        paymentTypeDropdown.appendChild(option);
                    }

                    // Update nice-select UI if you're using it
                    $('#paymentType').niceSelect('update');
                } else {
                    console.error('Failed to fetch payment types.');
                }
            } catch (error) {
                console.error('Error fetching payment types:', error);
            }
        }

        async function placeOrder() {
            const token = sessionStorage.getItem('token');
            const userId = getUserIdFromToken();
            const addressSelect = document.getElementById('addressSelect');
            const timeSlotSelect = document.getElementById('timeSlot');
            const paymentTypeSelect = document.getElementById('paymentType');
            const orderDateInput = document.getElementById('orderDate');

            const orderDetails = Array.from(document.querySelectorAll('.checkout__order__item')).map(item => {
                return {
                    milkId: parseInt(item.dataset.milkId),
                    quantity: parseInt(item.querySelector('.quantity').innerText),
                    discount: 0,
                    price: parseFloat(item.dataset.price) / 1000,
                    total: parseInt(item.dataset.total) / 1000
                };
            });

            const paymentTypeId = parseInt(paymentTypeSelect.value);
            let orderStatusId = 1;
            if (paymentTypeId === 2) { // InCash
                orderStatusId = 2;
            }

            const totalAmount = parseFloat(document.getElementById('order-total').innerText.replace(' đ', '').replace('.', '')) * 1000;
            const createAt = new Date().toISOString();

            const order = {
                createAt: createAt,
                updateAt: createAt,
                orderDate: new Date(orderDateInput.value).toISOString(),
                totalAmount: totalAmount,
                buyerId: parseInt(userId),
                addressId: parseInt(addressSelect.value),
                paymentTypeId: paymentTypeId,
                orderStatusId: orderStatusId,
                timeSlotId: parseInt(timeSlotSelect.value),
                orderDetails: orderDetails
            };

            console.log("Order data to be sent:", JSON.stringify(order)); // Log order data to be sent

            try {
                let response = await fetch('http://localhost:5215/odata/Order/simple', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(order)
                });

                let orderData;

                if (response.ok) {
                    orderData = await response.json(); // Get created order data
                }
                else if (response.status === 409) {
                    const errorData = await response.json();
                    console.error('Failed to place order:', errorData.message);
                    alert(`Failed to place order: ${errorData.message}`);
                }
                else
                {
                    // If unsuccessful, send another GET request to retrieve the order.
                    orderData = await fetchOrderByDateAndUserId(createAt, userId);
                }

                if (orderData) {
                    console.log('Order placed successfully', orderData);
                    alert('Order placed successfully');
                    await clearCart();

                    if (paymentTypeId === 1) { // OnlinePayment
                        await createPaymentLink(orderData.id);
                    } else {
                        window.location.href = './index';
                    }
                } else {
                    console.error('Failed to place order');
                    alert('Failed to place order');
                }
            } catch (error) {
                console.error('Error placing order:', error);
                alert('Error placing order');
            }
        }

        async function fetchOrderByDateAndUserId(createAt, userId) {
            const token = sessionStorage.getItem('token');
            try {
                const response = await fetch(`http://localhost:5215/api/Payment/FetchOrderByDateAndUserId`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId, createAt })
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Fetched Order Data:', data); // Log response data for debugging
                    return data;
                } else {
                    console.error('Failed to fetch order by date and userId:', response.status, response.statusText);
                    return null;
                }
            } catch (error) {
                console.error('Error fetching order by date and userId:', error);
                return null;
            }
        }


        async function createPaymentLink(orderId) {
            const token = sessionStorage.getItem('token');
            try {
                const body = {
                    description: "Order Payment",
                    cancelUrl: window.location.origin + "/index",
                    returnUrl: window.location.origin + "/Checkout",
                    orderId: orderId // Add orderId to the body of the request
                };

                let response = await fetch(`http://localhost:5215/api/Payment/create`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(body)
                });

                if (response.ok) {
                    const paymentData = await response.json();
                    window.location.href = paymentData.data.checkoutUrl; // Redirect to payment URL
                } else {
                    console.error('Failed to create payment link');
                    alert('Failed to create payment link');
                }
            } catch (error) {
                console.error('Error creating payment link:', error);
            }
        }


        async function confirmPayment(orderCode) {
            const token = sessionStorage.getItem('token');
            try {
                const response = await fetch(`http://localhost:5215/api/Payment/${orderCode}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const paymentInfo = await response.json();
                    console.log('Payment confirmed:', paymentInfo);
                    if (paymentInfo.status === "PAID") {
                        window.location.href = "/Customer/OrderHistory";
                    }
                } else {
                    console.error('Failed to confirm payment:', response.status, response.statusText);
                    alert('Failed to confirm payment');
                }
            } catch (error) {
                console.error('Error confirming payment:', error);
                alert('Error confirming payment');
            }
        }



        async function clearCart() {
            const token = sessionStorage.getItem('token');
            try {
                let response = await fetch('http://localhost:5215/odata/Cart/ClearCart', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    console.log('Cart cleared successfully');
                    sessionStorage.removeItem('cart'); // Remove cart from sessionStorage
                    updateCartTotalPrice(); // Call updateCartTotalPrice after clearing cart
                    updateCartCount(); // Call updateCartCount after clearing cart
                } else {
                    console.error('Failed to clear cart.');
                }
            } catch (error) {
                console.error('Error clearing cart:', error);
            }
        }

        function formatCurrency(amount) {
            return amount.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        }

        // Update order total logic
        function updateOrderTotal(cartItems) {
            var subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            var discount = parseFloat(document.getElementById('order-discount').innerText.replace(' đ', '').replace('.', ''));
            var total = subtotal - discount;
            document.getElementById('order-subtotal').innerText = `${formatCurrency(subtotal)} đ`;
            document.getElementById('order-total').innerText = `${formatCurrency(total)} đ`;
        }

        function getUserIdFromToken() {
            const token = sessionStorage.getItem('token');
            if (token) {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return payload.nameid;
            }
            return null;
        }

        async function applyCoupon(event) {
            //event.preventDefault();
            const couponCode = document.querySelector('#shoping_discount_Id').value;
            const token = sessionStorage.getItem('token');

            try {
                let response = await fetch(`http://localhost:5215/odata/Coupon?$filter=code eq '${couponCode}'`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    let data = await response.json();
                    if (data.$values && data.$values.length > 0) {
                        console.log('Coupon applied:', data);
                        applyCouponDiscount(data.$values[0]);
                    } else {
                        console.error('Invalid coupon code.');
                        alert('Invalid coupon code.');
                    }
                } else {
                    console.error('Failed to apply coupon.');
                    alert('Failed to apply coupon.');
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                alert('Error applying coupon.');
            }
        }

        async function loadCoupons() {
            const token = sessionStorage.getItem('token');
            try {
                let response = await fetch('http://localhost:5215/odata/Coupon', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (response.ok) {
                    let coupons = await response.json();
                    console.log('Coupons:', coupons);

                    let couponSelect = document.getElementById('couponSelect');
                    couponSelect.innerHTML = '<option value="" disabled selected>Chọn mã giảm giá</option>';
                    for (let i = 0; i < coupons.$values.length; i++) {
                        let coupon = coupons.$values[i];
                        let option = document.createElement('option');
                        option.value = coupon.id;
                        option.text = coupon.code;
                        option.dataset.discount = coupon.discountAmount; // Store discount amount in data attribute
                        couponSelect.appendChild(option);
                    }

                    $('#couponSelect').niceSelect('update');
                } else {
                    console.error('Failed to fetch coupons.');
                }
            } catch (error) {
                console.error('Error fetching coupons:', error);
            }
        }

        function applyCouponDiscount() {
            const selectedOption = document.getElementById('couponSelect').selectedOptions[0];
            if (selectedOption) {
                const discountAmount = parseFloat(selectedOption.dataset.discount);
                console.log('Selected discount:', discountAmount);

                const subtotal = parseFloat(document.getElementById('order-subtotal').innerText.replace(/[^0-9]/g, '')) * 1000;
                console.log('Subtotal:', subtotal);

                const discountInCurrency = discountAmount * 1000;
                const total = subtotal - discountInCurrency;

                console.log('Discount in currency:', discountInCurrency);
                console.log('New total:', total);

                document.getElementById('order-discount').innerText = `${formatCurrency(discountInCurrency)} đ`;
                document.getElementById('order-total').innerText = `${formatCurrency(total)} đ`;
            } else {
                console.error('No discount selected');
            }
        }

    </script>
</body>
