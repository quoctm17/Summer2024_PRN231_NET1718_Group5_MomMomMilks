@page
@model FE.Pages.shopping_cartModel
@{
}
<!DOCTYPE html>
<html lang="zxx">

<head>
    <meta charset="UTF-8">
    <meta name="description" content="Ogani Template">
    <meta name="keywords" content="Ogani, unica, creative, html">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Ogani | Template</title>
</head>

<body>
    <!-- Page Preloder -->
    <div id="preloder">
        <div class="loader"></div>
    </div>
    <!-- Hero Section Begin -->
    <section class="hero hero-normal">
        <div class="container">
            <div class="row">
                <div class="col-lg-3">
                    <div class="hero__categories">
                        <div class="hero__categories__all">
                            <i class="fa fa-bars"></i>
                            <span>Tất cả loại sữa</span>
                        </div>
                        <ul>
                            @foreach (var category in Model.Categories)
                            {
                                <li><a href="#">@category.Name</a></li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="col-lg-9">
                    <div class="hero__search">
                        <div class="hero__search__form">
                            <form action="#">
                                <div class="hero__search__categories">
                                    Tất cả loại sữa
                                    <span class="arrow_carrot-down"></span>
                                </div>
                                <input type="text" placeholder="Bạn cần tìm gì?">
                                <button type="submit" class="site-btn">Tìm kiếm</button>
                            </form>
                        </div>
                        <div class="hero__search__phone">
                            <div class="hero__search__phone__icon">
                                <i class="fa fa-phone"></i>
                            </div>
                            <div class="hero__search__phone__text">
                                <h5>+65 11.188.888</h5>
                                <span>hỗ trợ 24/7</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Hero Section End -->
    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-section set-bg" data-setbg="img/breadcrumb.jpg" style="background-image: url('img/breadcrumb.jpg'); background-color: #000000;">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <div class="breadcrumb__text">
                        <h2>Giỏ Hàng</h2>
                        <div class="breadcrumb__option">
                            <a href="./index.html">Trang Chủ</a>
                            <span>Giỏ Hàng</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->
    <!-- Shoping Cart Section Begin -->
    <section class="shoping-cart spad">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="shoping__cart__table">
                        <table>
                            <thead>
                                <tr>
                                    <th>Hình ảnh</th>
                                    <th>Tên</th>
                                    <th>Giá</th>
                                    <th>Số lượng</th>
                                    <th>Tổng tiền</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="cart-items">
                                <!-- Cart items will be dynamically inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="shoping__cart__btns">
                        <a href="/" class="primary-btn cart-btn">Tiếp tục mua hàng</a>
                        <a id="save-cart-btn" href="#" class="primary-btn cart-btn cart-btn-right">
                            <span class="icon_save_alt"></span>
                            Lưu giỏ hàng
                        </a>
                        <a href="#" class="primary-btn cart-btn cart-btn-right" onclick="clearCart()">
                            <span class="icon_trash_alt"></span>
                            Xóa giỏ hàng
                        </a>
                        <a id="load-cart-btn" href="#" class="primary-btn cart-btn cart-btn-right" style="margin-left: 10px;">
                            <span class="icon_loading"></span>
                            Tải giỏ hàng
                        </a>
                    </div>
                </div>
                <div class="col-lg-6">
                    <!-- Optional discount code section can be added here -->
                </div>
                <div class="col-lg-6">
                    <div class="shoping__checkout">
                        <h5>Tổng tiền</h5>
                        <ul>
                            <li>Tổng phụ <span id="subtotal">0 đ</span></li>
                            <li>Tổng tiền <span id="total">0 đ</span></li>
                        </ul>
                        <a href="/checkout" class="primary-btn">Tiến hành thanh toán</a>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Shoping Cart Section End -->

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            loadCartFromSessionStorage();
            updateCartCount();
            updateCartTotalPrice();

            const saveCartBtn = document.getElementById('save-cart-btn');
            const loadCartBtn = document.getElementById('load-cart-btn');
            const proceedToCheckoutBtn = document.querySelector('.primary-btn[href="/checkout"]');

            if (saveCartBtn) {
                saveCartBtn.addEventListener('click', saveCart);
            }

            if (loadCartBtn) {
                loadCartBtn.addEventListener('click', confirmLoadCartFromDatabase);
            }

            if (proceedToCheckoutBtn) {
                proceedToCheckoutBtn.addEventListener('click', async function (event) {
                    event.preventDefault();
                    const token = sessionStorage.getItem('token');

                    const response = await fetch('http://localhost:5215/odata/Cart', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (response.ok) {
                        const dbCart = await response.json();
                        const dbCartItems = dbCart.$values || [];
                        const currentCart = JSON.parse(sessionStorage.getItem('cart')) || [];

                        const dbCartFormatted = dbCartItems.map(item => ({
                            id: item.milkId,
                            name: item.milk.name,
                            price: item.milk.price,
                            imageUrl: item.milk.imageUrl,
                            quantity: item.quantity
                        }));

                        if (!areCartsEqual(currentCart, dbCartFormatted)) {
                            Swal.fire({
                                title: 'Giỏ hàng đã thay đổi',
                                text: 'Giỏ hàng hiện tại của bạn đã thay đổi so với dữ liệu bạn đã lưu. Hành động này sẽ lưu giỏ hàng hiện tại và thay thế giỏ hàng đã lưu trước đó. Bạn vẫn muốn tiếp tục?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Có',
                                cancelButtonText: 'Không'
                            }).then(async (result) => {
                                if (result.isConfirmed) {
                                    await saveCart();
                                    window.location.href = '/checkout';
                                }
                            });
                        } else {
                            window.location.href = '/checkout';
                        }
                    } else if (response.status === 404) {
                        Swal.fire({
                            title: 'Giỏ hàng chưa được lưu',
                            text: 'Giỏ hàng của bạn chưa được lưu. Bạn có muốn lưu giỏ hàng trước khi tiến hành thanh toán không?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Có',
                            cancelButtonText: 'Không'
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                await saveCart();
                                window.location.href = '/checkout';
                            }
                        });
                    } else {
                        console.error('Failed to fetch cart from database.');
                    }
                });
            }
        });

        function areCartsEqual(cart1, cart2) {
            if (cart1.length !== cart2.length) return false;
            const sortedCart1 = cart1.slice().sort((a, b) => a.id - b.id);
            const sortedCart2 = cart2.slice().sort((a, b) => a.id - b.id);
            return sortedCart1.every((item, index) => {
                const otherItem = sortedCart2[index];
                return item.id === otherItem.id && item.quantity === otherItem.quantity;
            });
        }

        function loadCartFromSessionStorage() {
            let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            renderCartItems(cart);
        }

        function renderCartItems(cartItems) {
            let cartItemsHtml = cartItems.map(item => `
                        <tr>
                            <td class="shopping__cart__item">
                                <img class="shopping__cart__item__image" src="${item.imageUrl}" alt="${item.name}">
                            </td>
                            <td class="shopping__cart__item">
                                <h5>${item.name}</h5>
                            </td>
                            <td class="shopping__cart__price">
                                ${formatCurrency(item.price)} đ
                            </td>
                            <td class="shopping__cart__quantity">
                                <div class="quantity">
                                    <button class="quantity-btn" onclick="updateQuantity(${item.id}, ${item.quantity - 1})">-</button>
                                    <div class="pro-qty">
                                        <input type="text" value="${item.quantity}" onchange="updateQuantity(${item.id}, this.value)">
                                    </div>
                                    <button class="quantity-btn" onclick="updateQuantity(${item.id}, ${item.quantity + 1})">+</button>
                                </div>
                            </td>
                            <td class="shopping__cart__total">
                                ${formatCurrency(item.price * item.quantity)} đ
                            </td>
                            <td class="shopping__cart__item__close">
                                <span class="icon_close" onclick="confirmRemoveFromCart(${item.id})"></span>
                            </td>
                        </tr>
                    `).join('');
            document.getElementById('cart-items').innerHTML = cartItemsHtml;
            updateCartTotal(cartItems);
        }

        async function saveCart() {
            const cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            const token = sessionStorage.getItem('token');

            //if (cart.length === 0) {
            //    if (confirm("Giỏ hàng hiện tại của bạn trống. Nếu bạn tiếp tục, nó có thể xóa giỏ hàng bạn đã lưu trước đó. Bạn có chắc không?")) {
            //        await clearCartInDatabase(token);
            //    }
            //    return;
            //}
            if (cart.length === 0) {
                Swal.fire({
                    title: 'Giỏ hàng trống!',
                    text: 'Giỏ hàng hiện tại của bạn trống. Nếu bạn tiếp tục, nó có thể xóa giỏ hàng bạn đã lưu trước đó. Bạn có chắc không?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Có',
                    cancelButtonText: 'Không'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        await clearCartInDatabase(token);
                    }
                });
                return;
            }

            const cartItems = cart.map(item => ({
                MilkId: item.id,
                Quantity: item.quantity
            }));

            try {
                let response = await fetch('http://localhost:5215/odata/Cart/SaveCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(cartItems)
                });

                if (response.ok) {
                    //alert('Giỏ hàng đã lưu thành công!');
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: 'Giỏ hàng đã lưu thành công!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    const errorText = await response.text();
                    console.error('Failed to save cart:', errorText);
                    //alert(`Không thể lưu giỏ hàng: ${errorText}`);
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: `Không thể lưu giỏ hàng: ${errorText}`
                    });
                }
            } catch (error) {
                console.error('Error saving cart:', error);
                //alert('Không thể lưu giỏ hàng');
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Không thể lưu giỏ hàng'
                });
            }
        }

        async function loadCartFromDatabase() {
            const token = sessionStorage.getItem('token');
            if (token) {
                try {
                    let response = await fetch('http://localhost:5215/odata/Cart', {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });

                    if (response.ok) {
                        const cartData = await response.json();
                        const cartItems = cartData.$values || [];
                        const formattedCartItems = cartItems.map(item => ({
                            id: item.milkId,
                            name: item.milk.name,
                            price: item.milk.price,
                            imageUrl: item.milk.imageUrl,
                            quantity: item.quantity
                        }));
                        sessionStorage.setItem('cart', JSON.stringify(formattedCartItems));
                        loadCartFromSessionStorage();
                        updateCartCount();
                        updateCartTotalPrice();
                    } else {
                        console.error('Failed to load cart from database.');
                        //alert('Không thể tải giỏ hàng từ cơ sở dữ liệu.');
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: 'Không thể tải giỏ hàng từ cơ sở dữ liệu.'
                        });
                    }
                } catch (error) {
                    console.error('Error loading cart from database:', error);
                    //alert('Không thể tải giỏ hàng từ cơ sở dữ liệu.');
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Không thể tải giỏ hàng từ cơ sở dữ liệu.'
                    });
                }
            } else {
                //alert('Người dùng không đăng nhập.');
                Swal.fire({
                    icon: 'warning',
                    title: 'Chưa đăng nhập!',
                    text: 'Người dùng không đăng nhập.'
                });
            }
        }

        function confirmLoadCartFromDatabase() {
            let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            if (cart.length > 0) {
                //if (confirm("Giỏ hàng hiện tại của bạn không trống. Nếu bạn tải giỏ hàng bạn đã lưu trước đó, giỏ hàng hiện tại có thể bị mất. Bạn có chắc không?")) {
                //    loadCartFromDatabase();
                //}
                Swal.fire({
                    title: 'Tải giỏ hàng đã lưu?',
                    text: 'Giỏ hàng hiện tại của bạn không trống. Nếu bạn tải giỏ hàng bạn đã lưu trước đó, giỏ hàng hiện tại có thể bị mất. Bạn có chắc không?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Có',
                    cancelButtonText: 'Không'
                }).then((result) => {
                    if (result.isConfirmed) {
                        loadCartFromDatabase();
                    }
                });
            } else {
                loadCartFromDatabase();
            }
        }

        async function clearCartInDatabase(token) {
            try {
                let response = await fetch('http://localhost:5215/odata/Cart/ClearCart', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    /*alert('Giỏ hàng đã xóa thành công trong cơ sở dữ liệu.');*/
                    Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: 'Giỏ hàng đã xóa thành công trong cơ sở dữ liệu!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    console.error('Failed to clear cart in the database.');
                    //alert('Không thể xóa giỏ hàng trong cơ sở dữ liệu.');
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: 'Không thể xóa giỏ hàng trong cơ sở dữ liệu.'
                    });
                }
            } catch (error) {
                console.error('Error clearing cart in the database:', error);
                //alert('Lỗi xóa giỏ hàng trong cơ sở dữ liệu.');
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Lỗi xóa giỏ hàng trong cơ sở dữ liệu.'
                });
            }
        }

        function formatCurrency(amount) {
            return amount.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        }

        async function updateQuantity(id, quantity) {
            if (quantity < 1) quantity = 1;
            let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            let item = cart.find(item => item.id === id);
            if (item) {
                item.quantity = quantity;
                sessionStorage.setItem('cart', JSON.stringify(cart));
                loadCartFromSessionStorage();
                updateCartCount();
            }
        }

        function confirmRemoveFromCart(id) {
            //if (confirm("Bạn có chắc chắn muốn xóa mặt hàng này khỏi giỏ hàng không?")) {
            //    removeFromCart(id);
            //}
            Swal.fire({
                title: 'Xóa sản phẩm?',
                text: 'Bạn có chắc chắn muốn xóa mặt hàng này khỏi giỏ hàng không?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
            }).then((result) => {
                if (result.isConfirmed) {
                    removeFromCart(id);
                }
            });
        }

        function removeFromCart(id) {
            let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            cart = cart.filter(item => item.id !== id);
            sessionStorage.setItem('cart', JSON.stringify(cart));
            loadCartFromSessionStorage();
            updateCartCount();
        }

        function clearCart() {
            //if (confirm("Bạn có chắc chắn muốn xóa giỏ hàng không?")) {
            //    sessionStorage.removeItem('cart');
            //    loadCartFromSessionStorage();
            //    updateCartCount();
            //    updateCartTotalPrice();
            //}

            Swal.fire({
                title: 'Xóa giỏ hàng?',
                text: 'Bạn có chắc chắn muốn xóa giỏ hàng không?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Có',
                cancelButtonText: 'Không'
            }).then((result) => {
                if (result.isConfirmed) {
                    sessionStorage.removeItem('cart');
                    loadCartFromSessionStorage();
                    updateCartCount();
                    updateCartTotalPrice();
                }
            });
        }

        function updateCartTotal(cartItems) {
            var subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            document.getElementById('subtotal').innerText = `${formatCurrency(subtotal)} đ`;
            document.getElementById('total').innerText = `${formatCurrency(subtotal)} đ`;
        }

        function updateCartCount() {
            let cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            let count = cart.reduce((sum, item) => sum + item.quantity, 0);
            document.getElementById('cart-count').innerText = count;
        }
    </script>

    <style>
        .quantity {
            display: flex;
            align-items: center;
        }

            .quantity .quantity-btn {
                width: 30px;
                height: 30px;
                background-color: #f3f3f3;
                border: 1px solid #ccc;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
            }

                .quantity .quantity-btn:hover {
                    background-color: #ddd;
                }

        .pro-qty {
            margin: 0 10px;
        }

            .pro-qty input {
                width: 40px;
                text-align: center;
            }

        .shopping__cart__item__image {
            max-width: 100px; /* Adjust this value as needed */
            height: auto;
            padding-right: 20px;
        }

        .shopping__cart__table th,
        .shopping__cart__table td {
            vertical-align: middle;
            text-align: center;
        }

            .shopping__cart__table th:first-child,
            .shopping__cart__table td:first-child {
                width: 120px; /* Adjust this value as needed */
            }

        .shoping__cart__table table thead th.shoping__product {
            text-align: center;
        }

        .shoping__cart__table table {
            width: 100%;
            text-align: left;
        }

        /* Add hover effect and cursor change for the close icon */
        .icon_close {
            cursor: pointer;
        }

            .icon_close:hover {
                color: red;
            }

        .primary-btn .icon_save_alt {
            margin-right: 5px;
        }

        .primary-btn .icon_loading {
            margin-right: 5px;
        }

        .primary-btn .icon_trash_alt {
            margin-right: 5px;
        }
    </style>

</body>

</html>
